// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var webworks_core_Scene = function() { };
webworks_core_Scene.prototype = {
	init: function() {
	}
	,update: function(dt) {
	}
	,draw: function(ctx) {
	}
};
var Main = function() {
	this.time = 0.0;
};
Main.main = function() {
	webworks_core_Game.init(Main,{ images : ["me.png"]});
};
Main.__super__ = webworks_core_Scene;
Main.prototype = $extend(webworks_core_Scene.prototype,{
	init: function() {
		this.parent = webworks_display_Sprite.get("me.png");
		this.child = webworks_display_Sprite.get("me.png");
		this.child.set_interactive(true);
		this.child.on_pointer_down = function(e) {
			console.log("src/Main.hx:23:",e);
		};
		this.parent.get_position().set(webworks_core_Game.width / 2,webworks_core_Game.height / 2);
		this.parent.get_scale().set(0.25,0.25);
		this.child.get_scale().set(0.5,0.5);
		this.parent.add(this.child);
	}
	,update: function(dt) {
		this.time += dt;
		var fh = this.parent;
		fh.set_angle(fh.get_angle() + 5 * dt);
		var fh = this.child;
		fh.set_x(fh.get_x() + Math.sin(this.time));
		var fh = this.child;
		fh.set_y(fh.get_y() + Math.cos(this.time));
		var ct = this.child.get_global_transform();
		var pt = this.parent.get_global_transform();
		var _this = this.child.get_rect();
		this.child_poly = webworks_math_PolyUtils.apply_transform([webworks_math_Vec2.get(_this.get_left(),_this.get_top()),webworks_math_Vec2.get(_this.get_right(),_this.get_top()),webworks_math_Vec2.get(_this.get_right(),_this.get_bottom()),webworks_math_Vec2.get(_this.get_left(),_this.get_bottom())],ct);
		var _this = this.parent.get_rect();
		this.parent_poly = webworks_math_PolyUtils.apply_transform([webworks_math_Vec2.get(_this.get_left(),_this.get_top()),webworks_math_Vec2.get(_this.get_right(),_this.get_top()),webworks_math_Vec2.get(_this.get_right(),_this.get_bottom()),webworks_math_Vec2.get(_this.get_left(),_this.get_bottom())],pt);
		ct.put();
		pt.put();
	}
	,draw: function(ctx) {
		webworks_util_ContextTools.clear(ctx,16777215);
		webworks_util_ContextTools.sprite(ctx,this.parent);
		webworks_util_ContextTools.draw_poly(ctx,0,this.child_poly,4);
		webworks_util_ContextTools.draw_poly(ctx,0,this.parent_poly,4);
		var _g = 0;
		var _g1 = Math.floor(webworks_core_Game.height / 50);
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g3 = Math.floor(webworks_core_Game.width / 50);
			while(_g2 < _g3) {
				var i = _g2++;
				webworks_util_ContextTools.line(ctx,13684944,i * 50,0,i * 50,webworks_core_Game.height,1,0.02);
				webworks_util_ContextTools.line(ctx,13684944,0,j * 50,webworks_core_Game.width,j * 50,1,0.02);
			}
		}
		var _g = 0;
		var _g1 = Math.floor(webworks_core_Game.height / 100);
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g3 = Math.floor(webworks_core_Game.width / 100);
			while(_g2 < _g3) {
				var i = _g2++;
				webworks_util_ContextTools.line(ctx,8421504,i * 100,0,i * 100,webworks_core_Game.height,2,0.02);
				webworks_util_ContextTools.line(ctx,8421504,0,j * 100,webworks_core_Game.width,j * 100,2,0.02);
			}
		}
	}
});
var StringTools = function() { };
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var webworks_core_Assets = function() { };
webworks_core_Assets.on_loading = function(n) {
};
webworks_core_Assets.on_loaded = function() {
};
webworks_core_Assets.load = function(assets,on_loaded,on_loading) {
	if(assets == null) {
		if(on_loaded != null) {
			on_loaded();
		}
		return;
	}
	if(on_loading != null) {
		webworks_core_Assets.on_loading = on_loading;
	}
	if(on_loaded != null) {
		webworks_core_Assets.on_loaded = on_loaded;
	}
	if(assets.images != null) {
		var _g = 0;
		var _g1 = assets.images;
		while(_g < _g1.length) webworks_core_Assets.load_image(_g1[_g++]);
	}
	if(assets.audio != null) {
		var _g = 0;
		var _g1 = assets.audio;
		while(_g < _g1.length) webworks_core_Assets.load_audio(_g1[_g++]);
	}
	if(assets.text != null) {
		var _g = 0;
		var _g1 = assets.text;
		while(_g < _g1.length) ++_g;
	}
	webworks_core_Assets.check_load();
};
webworks_core_Assets.get_image = function(src) {
	return webworks_core_Assets.images.h[src];
};
webworks_core_Assets.load_image = function(src) {
	webworks_core_Assets.loaded.h[src] = false;
	var image = window.document.createElement("img");
	image.src = src;
	image.style.display = "none";
	window.document.body.appendChild(image);
	image.onload = function() {
		webworks_core_Assets.check_load(src);
	};
	webworks_core_Assets.images.h[src] = image;
};
webworks_core_Assets.load_audio = function(src) {
	webworks_core_Assets.loaded.h[src] = false;
	var audio = window.document.createElement("audio");
	audio.src = src;
	audio.style.display = "none";
	window.document.body.appendChild(audio);
	audio.onload = function() {
		webworks_core_Assets.check_load(src);
	};
	audio.loop = false;
	webworks_core_Assets.audio.h[src] = audio;
};
webworks_core_Assets.check_load = function(src) {
	if(src != null) {
		webworks_core_Assets.loaded.h[src] = true;
	}
	var has_loaded = 0;
	var total = 0;
	var h = webworks_core_Assets.loaded.h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_current++;
		if(total++ > -1 && h[_g_keys[key]] == true) {
			++has_loaded;
		}
	}
	webworks_core_Assets.on_loading(has_loaded / total);
	if(has_loaded == total) {
		webworks_core_Assets.on_loaded();
	}
};
var webworks_util_EventBus = function() {
	this.listeners = new haxe_ds_StringMap();
};
webworks_util_EventBus.prototype = {
	listen: function(ev,fn) {
		if(!Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			this.listeners.h[ev] = [];
		}
		this.listeners.h[ev].push(fn);
	}
	,dispatch: function(ev,data) {
		if(!Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			return;
		}
		var _g = 0;
		var _g1 = this.listeners.h[ev];
		while(_g < _g1.length) _g1[_g++](data);
	}
	,unlisten: function(ev,fn) {
		if(ev == null && fn == null) {
			return;
		} else if(ev == null && fn != null) {
			var _g_keys = Object.keys(this.listeners.h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) HxOverrides.remove(this.listeners.h[_g_keys[_g_current++]],fn);
		} else if(ev != null && fn == null) {
			this.listeners.h[ev] = [];
		} else if(Object.prototype.hasOwnProperty.call(this.listeners.h,ev)) {
			HxOverrides.remove(this.listeners.h[ev],fn);
		}
	}
};
var webworks_core_Game = function() { };
webworks_core_Game.init = function(initial_scene,assets) {
	webworks_core_Game.width = window.innerWidth;
	webworks_core_Game.height = window.innerHeight;
	webworks_core_Game.init_scene = initial_scene;
	webworks_core_Game.init_canvas();
	webworks_core_Game.init_events();
	webworks_input_Keys.init();
	webworks_input_Pointer.init();
	webworks_util_Interactions.init();
	webworks_core_Preloader.init(webworks_core_Game.ctx);
	webworks_core_Assets.load(assets,webworks_core_Game.on_loaded,webworks_core_Preloader.draw);
};
webworks_core_Game.init_events = function() {
	window.onresize = function(e) {
		webworks_core_Game.APP_EVENTS.dispatch(webworks_core_AppEvents.RESIZE,{ width : window.innerWidth, height : window.innerHeight});
	};
	window.onfocus = function(e) {
		webworks_core_Game.APP_EVENTS.dispatch(webworks_core_AppEvents.FOCUS,{ });
	};
	window.onblur = function(e) {
		webworks_core_Game.APP_EVENTS.dispatch(webworks_core_AppEvents.FOCUS_LOST,{ });
	};
	webworks_core_Game.APP_EVENTS.listen(webworks_core_AppEvents.FOCUS,function(ev) {
		webworks_core_Game.active = true;
	});
	webworks_core_Game.APP_EVENTS.listen(webworks_core_AppEvents.FOCUS_LOST,function(ev) {
		webworks_core_Game.active = false;
	});
	webworks_core_Game.APP_EVENTS.listen(webworks_core_AppEvents.RESIZE,function(ev) {
		webworks_core_Game.width = window.innerWidth;
		webworks_core_Game.height = window.innerHeight;
	});
	webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.UPDATE,function(ev) {
		webworks_core_Game.scene.update(ev.dt);
		webworks_core_Game.scene.draw(webworks_core_Game.ctx);
	});
};
webworks_core_Game.init_canvas = function() {
	webworks_core_Game.canvas = window.document.createElement("canvas");
	webworks_core_Game.ctx = webworks_core_Game.canvas.getContext("2d",null);
	window.document.body.appendChild(webworks_core_Game.canvas);
	var resize = function(ev) {
		webworks_core_Game.canvas.width = ev.width;
		return webworks_core_Game.canvas.height = ev.height;
	};
	resize({ width : webworks_core_Game.width, height : webworks_core_Game.height});
	webworks_core_Game.APP_EVENTS.listen(webworks_core_AppEvents.RESIZE,resize);
};
webworks_core_Game.on_loaded = function() {
	webworks_core_Game.scene = Type.createInstance(webworks_core_Game.init_scene,[]);
	webworks_core_Game.scene.init();
	window.requestAnimationFrame(webworks_core_Game.loop);
};
webworks_core_Game.loop = function(time) {
	window.requestAnimationFrame(webworks_core_Game.loop);
	if(!webworks_core_Game.active && (webworks_core_Game.last = time) == time) {
		return;
	}
	if(webworks_core_Game.last == null) {
		webworks_core_Game.last = time;
	}
	var dt = (time - webworks_core_Game.last) / 1000;
	webworks_core_Game.GAME_EVENTS.dispatch(webworks_core_GameEvents.PRE_UPDATE,{ });
	webworks_core_Game.GAME_EVENTS.dispatch(webworks_core_GameEvents.UPDATE,{ dt : dt});
	webworks_core_Game.GAME_EVENTS.dispatch(webworks_core_GameEvents.POST_UPDATE,{ });
	webworks_core_Game.last = time;
};
var webworks_core_AppEvents = function() { };
var webworks_core_GameEvents = function() { };
var webworks_core_Preloader = function() { };
webworks_core_Preloader.init = function(ctx) {
	webworks_core_Preloader.ctx = ctx;
};
webworks_core_Preloader.draw = function(amt) {
	webworks_util_ContextTools.clear(webworks_core_Preloader.ctx,0);
	webworks_util_ContextTools.draw_rect(webworks_core_Preloader.ctx,-2236963,webworks_core_Game.width / 2 - webworks_core_Game.width / 4,webworks_core_Game.height / 2 - 8,webworks_core_Game.width / 2,16,2);
	webworks_util_ContextTools.fill_rect(webworks_core_Preloader.ctx,-2236963,webworks_core_Game.width / 2 - webworks_core_Game.width / 4 + 4,webworks_core_Game.height / 2 - 4,(webworks_core_Game.width / 2 - 8) * amt,8);
};
var webworks_math_Matrix = function() {
};
webworks_math_Matrix.get = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	if(webworks_math_Matrix.pool.length > 0) {
		return webworks_math_Matrix.pool.shift().set(a,b,c,d,tx,ty);
	} else {
		return new webworks_math_Matrix().set(a,b,c,d,tx,ty);
	}
};
webworks_math_Matrix.prototype = {
	set: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
		return this;
	}
	,put: function() {
		this.identity();
		webworks_math_Matrix.pool.push(this);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,transform: function(t) {
		this.scale(t.scale.x,t.scale.y);
		this.rotate(t.rotation);
		this.translate(t.position.x,t.position.y);
	}
	,rotate: function(radians) {
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(x,y) {
		this.a *= x;
		this.b *= y;
		this.c *= x;
		this.d *= y;
		this.tx *= x;
		this.ty *= y;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,to_transform: function(t,weak) {
		if(weak == null) {
			weak = false;
		}
		if(t == null) {
			t = webworks_display_Transform.get();
		}
		var delta = this.a * this.d - this.b * this.c;
		t.position.set(this.tx,this.ty);
		if(this.a != 0 || this.b != 0) {
			var r = Math.sqrt(this.a * this.a + this.b * this.b);
			t.rotation = this.b > 0 ? Math.acos(this.a / r) : -Math.acos(this.a / r);
			t.scale.set(r,delta / r);
		} else if(this.c != 0 || this.d != 0) {
			var s = Math.sqrt(this.c * this.c + this.d * this.d);
			t.rotation = Math.PI / 2 - (this.d > 0 ? Math.acos(-this.c / s) : -Math.acos(this.c / s));
			t.scale.set(delta / s,s);
		}
		if(weak) {
			this.put();
		}
		return t;
	}
};
var webworks_display_Drawable = function() {
	this.children = [];
	this.pivot = webworks_math_Vec2.get(0.5,0.5);
	this.height = 0;
	this.width = 0;
	this.on_pointer_move = function(e) {
	};
	this.on_pointer_up = function(e) {
	};
	this.on_pointer_down = function(e) {
	};
	this.interactive = false;
	this.alpha = 1;
	this.transform = webworks_display_Transform.get();
};
webworks_display_Drawable.prototype = {
	set_interactive: function(b) {
		if(b) {
			webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.PRE_UPDATE,$bind(this,this.pre_update));
		} else {
			webworks_core_Game.GAME_EVENTS.unlisten(webworks_core_GameEvents.PRE_UPDATE,$bind(this,this.pre_update));
		}
		return this.interactive = b;
	}
	,get_position: function() {
		return this.transform.position;
	}
	,get_x: function() {
		return this.get_position().x;
	}
	,set_x: function(n) {
		return this.get_position().x = n;
	}
	,get_y: function() {
		return this.get_position().y;
	}
	,set_y: function(n) {
		return this.get_position().y = n;
	}
	,get_radians: function() {
		return this.transform.rotation;
	}
	,set_radians: function(n) {
		return this.transform.rotation = n;
	}
	,get_angle: function() {
		return this.get_radians() * (180 / Math.PI);
	}
	,set_angle: function(n) {
		return this.set_radians(n * Math.PI / 180);
	}
	,get_scale: function() {
		return this.transform.scale;
	}
	,get_rect: function() {
		return webworks_math_Rect.get(this.get_x() - this.width * this.pivot.x,this.get_y() - this.width * this.pivot.y,this.width,this.height);
	}
	,get_matrix: function() {
		var m = webworks_math_Matrix.get();
		var stack = [this];
		var p = this.parent;
		while(p != null) {
			stack.push(p);
			p = p.parent;
		}
		while(stack.length > 0) m.transform(stack.shift().transform);
		return m;
	}
	,pre_update: function(e) {
		if(this.interactive) {
			webworks_util_Interactions.add(this);
		}
	}
	,draw: function(ctx) {
		ctx.save();
		ctx.globalAlpha = this.alpha;
		this._draw(ctx);
		ctx.restore();
	}
	,_draw: function(ctx) {
		this.apply_transform_to_ctx(ctx);
		this.draw_children(ctx);
	}
	,draw_children: function(ctx) {
		ctx.translate(this.width * this.pivot.x,this.height * this.pivot.y);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) _g1[_g++]._draw(ctx);
	}
	,apply_transform_to_ctx: function(ctx) {
		ctx.translate(this.transform.position.x,this.transform.position.y);
		ctx.rotate(this.transform.rotation);
		ctx.translate(-this.width * this.pivot.x * this.get_scale().x,-this.height * this.pivot.y * this.get_scale().y);
		ctx.scale(this.get_scale().x,this.get_scale().y);
	}
	,add: function(child,at) {
		if(child.parent != null) {
			child.parent.remove(child);
		}
		child.parent = this;
		if(at == null) {
			this.children.push(child);
		} else {
			this.children.splice(at,0,child);
		}
	}
	,remove: function(child) {
		child.parent = null;
		HxOverrides.remove(this.children,child);
	}
	,get_global_transform: function() {
		return this.get_matrix().to_transform(null,true);
	}
};
var webworks_display_Sprite = function() {
	this.frame = webworks_math_Rect.get();
	webworks_display_Drawable.call(this);
};
webworks_display_Sprite.get = function(src) {
	if(webworks_display_Sprite.pool.length > 0) {
		return webworks_display_Sprite.pool.shift().reset(src);
	} else {
		return new webworks_display_Sprite().reset(src);
	}
};
webworks_display_Sprite.__super__ = webworks_display_Drawable;
webworks_display_Sprite.prototype = $extend(webworks_display_Drawable.prototype,{
	reset: function(src,alpha,t) {
		if(alpha == null) {
			alpha = 1;
		}
		var _gthis = this;
		if(t != null) {
			this.transform.copy_from(t);
		} else {
			this.transform.to_default();
			this.pivot.set(0.5,0.5);
		}
		this.alpha = alpha;
		this.image = webworks_core_Assets.get_image(src);
		if(this.image != null) {
			this.width = this.image.width;
			this.height = this.image.height;
			this.frame.set(0,0,this.image.width,this.image.height);
		} else {
			webworks_core_Assets.load({ images : [src]},function() {
				_gthis.reset(src,_gthis.alpha,_gthis.transform);
			});
		}
		return this;
	}
	,_draw: function(ctx) {
		this.apply_transform_to_ctx(ctx);
		if(this.image != null) {
			ctx.drawImage(this.image,this.frame.x,this.frame.y,this.frame.width,this.frame.height,0,0,this.frame.width,this.frame.height);
		}
		this.draw_children(ctx);
	}
});
var webworks_display_Transform = function() {
	this.rotation = 0;
	this.scale = webworks_math_Vec2.get(1,1);
	this.position = webworks_math_Vec2.get(0,0);
};
webworks_display_Transform.get = function() {
	if(webworks_display_Transform.pool.length > 0) {
		return webworks_display_Transform.pool.shift().to_default();
	}
	return new webworks_display_Transform().to_default();
};
webworks_display_Transform.prototype = {
	to_default: function() {
		this.position.set(0,0);
		this.scale.set(1,1);
		this.rotation = 0;
		return this;
	}
	,put: function() {
		webworks_display_Transform.pool.push(this);
	}
	,copy_from: function(t) {
		var v = t.position;
		this.position.set(v.x,v.y);
		var v = t.scale;
		this.scale.set(v.x,v.y);
		this.rotation = t.rotation;
		return this;
	}
};
var webworks_input_Keys = function() { };
webworks_input_Keys.init = function() {
	window.document.addEventListener("keydown",function(e) {
		webworks_input_Keys.set_key(e.key,true);
	});
	window.document.addEventListener("keyup",function(e) {
		webworks_input_Keys.set_key(e.key,false);
	});
	webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.POST_UPDATE,function(e) {
		var h = webworks_input_Keys.keys.h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			webworks_input_Keys.last.h[key] = h[key];
		}
	});
};
webworks_input_Keys.set_key = function(key,down) {
	webworks_input_Keys.keys.h[key] = down;
	if(down) {
		webworks_input_Keys.last_key = key;
	}
};
var webworks_math_Vec2 = function() {
	this.y = 0;
	this.x = 0;
};
webworks_math_Vec2.get = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(webworks_math_Vec2.pool.length > 0) {
		return webworks_math_Vec2.pool.shift().set(x,y);
	}
	return new webworks_math_Vec2().set(x,y);
};
webworks_math_Vec2.prototype = {
	set: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		return this;
	}
	,put: function() {
		webworks_math_Vec2.pool.push(this);
	}
};
var webworks_input_Pointer = function() { };
webworks_input_Pointer.get_x = function() {
	return webworks_input_Pointer.last_position.x;
};
webworks_input_Pointer.get_y = function() {
	return webworks_input_Pointer.last_position.y;
};
webworks_input_Pointer.init = function() {
	window.document.addEventListener("pointermove",function(e) {
		webworks_input_Pointer.move(e.clientX,e.clientY,e.pointerId);
	});
	window.document.addEventListener("pointerdown",function(e) {
		webworks_input_Pointer.down(e.clientX,e.clientY,e.pointerId);
	});
	window.document.addEventListener("pointerup",function(e) {
		webworks_input_Pointer.up(e.clientX,e.clientY,e.pointerId);
	});
	window.document.addEventListener("pointerout",function(e) {
		webworks_input_Pointer.out(e.pointerId);
	});
	webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.POST_UPDATE,function(e) {
		webworks_input_Pointer.post_update();
	});
};
webworks_input_Pointer.move = function(x,y,id) {
	webworks_input_Pointer.POINTER_EVENTS.dispatch(webworks_input_PointerEvents.POINTER_MOVE,{ id : id, x : x, y : y, type : webworks_input_PointerEvents.POINTER_MOVE});
	if(webworks_input_Pointer.touches[id] != null) {
		webworks_input_Pointer.touches[id].set_position(x,y);
	}
	webworks_input_Pointer.last_position.set(x,y);
};
webworks_input_Pointer.down = function(x,y,id) {
	webworks_input_Pointer.POINTER_EVENTS.dispatch(webworks_input_PointerEvents.POINTER_DOWN,{ id : id, x : x, y : y, type : webworks_input_PointerEvents.POINTER_DOWN});
	webworks_input_Pointer.touches[id] = webworks_input_TouchPoint.get(id,x,y);
	webworks_input_Pointer.touches[id].just_touched = true;
	webworks_input_Pointer.last_position.set(x,y);
};
webworks_input_Pointer.up = function(x,y,id) {
	webworks_input_Pointer.POINTER_EVENTS.dispatch(webworks_input_PointerEvents.POINTER_UP,{ id : id, x : x, y : y, type : webworks_input_PointerEvents.POINTER_UP});
	if(webworks_input_Pointer.touches[id] == null) {
		return;
	}
	webworks_input_Pointer.touches[id].put();
	webworks_input_Pointer.touches[id] = null;
};
webworks_input_Pointer.out = function(id) {
	webworks_input_Pointer.POINTER_EVENTS.dispatch(webworks_input_PointerEvents.POINTER_OUT,{ id : id, x : webworks_input_Pointer.get_x(), y : webworks_input_Pointer.get_y(), type : webworks_input_PointerEvents.POINTER_OUT});
	if(webworks_input_Pointer.touches[id] == null) {
		return;
	}
	webworks_input_Pointer.touches[id].put();
	webworks_input_Pointer.touches[id] = null;
};
webworks_input_Pointer.post_update = function() {
	var _g = 0;
	var _g1 = webworks_input_Pointer.touches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		if(touch == null) {
			continue;
		}
		touch.just_touched = false;
		var v = touch.position;
		touch.last_position.set(v.x,v.y);
	}
};
var webworks_input_TouchPoint = function(id,x,y) {
	this.last_position = webworks_math_Vec2.get();
	this.position = webworks_math_Vec2.get();
	this.set(id,x,y);
};
webworks_input_TouchPoint.get = function(id,x,y) {
	if(webworks_input_TouchPoint.pool.length > 0) {
		return webworks_input_TouchPoint.pool.shift().set(id,x,y);
	} else {
		return new webworks_input_TouchPoint(id,x,y);
	}
};
webworks_input_TouchPoint.prototype = {
	put: function() {
		webworks_input_TouchPoint.pool.push(this);
	}
	,set: function(id,x,y) {
		this.id = id;
		this.position.set(x,y);
		return this;
	}
	,set_position: function(x,y) {
		this.last_position.set(this.position.x,this.position.y);
		this.position.set(x,y);
	}
};
var webworks_input_PointerEvents = function() { };
var webworks_math_PolyUtils = function() { };
webworks_math_PolyUtils.contains_point = function(poly,v) {
	var out = false;
	var i = 0;
	var j = poly.length - 1;
	while(i < poly.length) {
		if(poly[i].y > v.y != poly[j].y > v.y && v.x < (poly[j].x - poly[i].x) * (v.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x) {
			out = !out;
		}
		++i;
		j = i - 1;
	}
	return out;
};
webworks_math_PolyUtils.apply_transform = function(poly,t) {
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		var v = t.position;
		p.set(p.x - v.x,p.y - v.y);
		var v1 = t.scale;
		p.set(p.x * v1.x,p.y * v1.y);
		var v2 = Math.atan2(p.y,p.x) + t.rotation;
		var len = Math.sqrt(p.x * p.x + p.y * p.y);
		p.set(len * Math.cos(v2),len * Math.sin(v2));
		var v3 = t.position;
		p.set(p.x + v3.x,p.y + v3.y);
	}
	return poly;
};
webworks_math_PolyUtils.put = function(poly) {
	var _g = 0;
	while(_g < poly.length) poly[_g++].put();
};
var webworks_math_Rect = function() {
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
};
webworks_math_Rect.get = function(x,y,w,h) {
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(webworks_math_Rect.pool.length == 0) {
		return new webworks_math_Rect().set(x,y,w,h);
	}
	return webworks_math_Rect.pool.shift().set(x,y,w,h);
};
webworks_math_Rect.prototype = {
	get_top: function() {
		return this.y;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_left: function() {
		return this.x;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set: function(x,y,w,h) {
		if(h == null) {
			h = 0;
		}
		if(w == null) {
			w = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.width = w;
		this.height = h;
		return this;
	}
	,put: function() {
		webworks_math_Rect.pool.push(this);
	}
};
var webworks_util_ContextTools = function() { };
webworks_util_ContextTools.clear = function(ctx,col) {
	ctx.clearRect(0,0,webworks_core_Game.width,webworks_core_Game.height);
	if(col != null) {
		webworks_util_ContextTools.fill_rect(ctx,col,0,0,webworks_core_Game.width,webworks_core_Game.height);
	}
};
webworks_util_ContextTools.line = function(ctx,col,x1,y1,x2,y2,lw,alpha) {
	if(alpha != null) {
		webworks_util_ContextTools.last_alpha = ctx.globalAlpha;
		ctx.globalAlpha = alpha;
	}
	webworks_util_ContextTools.line_style(ctx,col,lw);
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.stroke();
	if(alpha != null) {
		ctx.globalAlpha = webworks_util_ContextTools.last_alpha;
	}
};
webworks_util_ContextTools.draw_poly = function(ctx,col,poly,lw,alpha) {
	if(alpha != null) {
		webworks_util_ContextTools.last_alpha = ctx.globalAlpha;
		ctx.globalAlpha = alpha;
	}
	webworks_util_ContextTools.line_style(ctx,col,lw);
	ctx.beginPath();
	ctx.moveTo(poly[poly.length - 1].x,poly[poly.length - 1].y);
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		ctx.lineTo(p.x,p.y);
	}
	ctx.stroke();
	if(alpha != null) {
		ctx.globalAlpha = webworks_util_ContextTools.last_alpha;
	}
};
webworks_util_ContextTools.fill_rect = function(ctx,col,x,y,w,h,alpha) {
	if(alpha != null) {
		webworks_util_ContextTools.last_alpha = ctx.globalAlpha;
		ctx.globalAlpha = alpha;
	}
	var out = "#";
	out = "#" + ("" + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2));
	ctx.fillStyle = out;
	ctx.fillRect(x,y,w,h);
	if(alpha != null) {
		ctx.globalAlpha = webworks_util_ContextTools.last_alpha;
	}
};
webworks_util_ContextTools.draw_rect = function(ctx,col,x,y,w,h,lw,alpha) {
	if(alpha != null) {
		webworks_util_ContextTools.last_alpha = ctx.globalAlpha;
		ctx.globalAlpha = alpha;
	}
	webworks_util_ContextTools.line_style(ctx,col,lw);
	ctx.strokeRect(x,y,w,h);
	if(alpha != null) {
		ctx.globalAlpha = webworks_util_ContextTools.last_alpha;
	}
};
webworks_util_ContextTools.line_style = function(ctx,col,lw,alpha) {
	if(alpha != null) {
		webworks_util_ContextTools.last_alpha = ctx.globalAlpha;
		ctx.globalAlpha = alpha;
	}
	ctx.lineWidth = lw != null ? lw : 1;
	var out = "#";
	out = "#" + ("" + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2));
	ctx.strokeStyle = out;
	ctx.beginPath();
	if(alpha != null) {
		ctx.globalAlpha = webworks_util_ContextTools.last_alpha;
	}
	return ctx;
};
webworks_util_ContextTools.sprite = function(ctx,sprite) {
	sprite.draw(ctx);
};
var webworks_util_Interactions = function() { };
webworks_util_Interactions.empty = function() {
	while(webworks_util_Interactions.stack.length > 0) webworks_util_Interactions.stack.pop();
};
webworks_util_Interactions.add = function(d) {
	webworks_util_Interactions.stack.unshift(d);
};
webworks_util_Interactions.init = function() {
	webworks_input_Pointer.POINTER_EVENTS.listen(webworks_input_PointerEvents.POINTER_DOWN,function(e) {
		webworks_util_Interactions.events.push(e);
	});
	webworks_input_Pointer.POINTER_EVENTS.listen(webworks_input_PointerEvents.POINTER_UP,function(e) {
		webworks_util_Interactions.events.push(e);
	});
	webworks_input_Pointer.POINTER_EVENTS.listen(webworks_input_PointerEvents.POINTER_MOVE,function(e) {
		webworks_util_Interactions.events.push(e);
	});
	webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.UPDATE,function(e) {
		webworks_util_Interactions.update();
	});
	webworks_core_Game.GAME_EVENTS.listen(webworks_core_GameEvents.POST_UPDATE,function(e) {
		webworks_util_Interactions.empty();
	});
};
webworks_util_Interactions.update = function() {
	while(webworks_util_Interactions.events.length > 0) {
		var event = webworks_util_Interactions.events.shift();
		switch(event.type) {
		case webworks_input_PointerEvents.POINTER_DOWN:
			webworks_util_Interactions.on_down(event);
			break;
		case webworks_input_PointerEvents.POINTER_MOVE:
			webworks_util_Interactions.on_move(event);
			break;
		case webworks_input_PointerEvents.POINTER_UP:
			webworks_util_Interactions.on_up(event);
			break;
		default:
			continue;
		}
	}
};
webworks_util_Interactions.on_down = function(e) {
	var _g = 0;
	var _g1 = webworks_util_Interactions.stack;
	while(_g < _g1.length) {
		var d = _g1[_g];
		++_g;
		if(!webworks_util_Interactions.pointer_over_drawable(d,e)) {
			continue;
		}
		d.on_pointer_down(e);
		return;
	}
};
webworks_util_Interactions.on_up = function(e) {
	var _g = 0;
	var _g1 = webworks_util_Interactions.stack;
	while(_g < _g1.length) {
		var d = _g1[_g];
		++_g;
		if(!webworks_util_Interactions.pointer_over_drawable(d,e)) {
			continue;
		}
		d.on_pointer_up(e);
		return;
	}
};
webworks_util_Interactions.on_move = function(e) {
	var _g = 0;
	var _g1 = webworks_util_Interactions.stack;
	while(_g < _g1.length) {
		var d = _g1[_g];
		++_g;
		if(!webworks_util_Interactions.pointer_over_drawable(d,e)) {
			continue;
		}
		d.on_pointer_move(e);
		return;
	}
};
webworks_util_Interactions.pointer_over_drawable = function(d,e) {
	var rect = d.get_rect();
	var poly = [webworks_math_Vec2.get(rect.get_left(),rect.get_top()),webworks_math_Vec2.get(rect.get_right(),rect.get_top()),webworks_math_Vec2.get(rect.get_right(),rect.get_bottom()),webworks_math_Vec2.get(rect.get_left(),rect.get_bottom())];
	var point = webworks_math_Vec2.get(e.x,e.y);
	var transform = d.get_global_transform();
	webworks_math_PolyUtils.apply_transform(poly,transform);
	var out = webworks_math_PolyUtils.contains_point(poly,point);
	rect.put();
	point.put();
	webworks_math_PolyUtils.put(poly);
	transform.put();
	return out;
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
webworks_core_Assets.images = new haxe_ds_StringMap();
webworks_core_Assets.audio = new haxe_ds_StringMap();
webworks_core_Assets.loaded = new haxe_ds_StringMap();
webworks_core_Game.APP_EVENTS = new webworks_util_EventBus();
webworks_core_Game.GAME_EVENTS = new webworks_util_EventBus();
webworks_core_Game.active = true;
webworks_core_AppEvents.RESIZE = "RESIZE";
webworks_core_AppEvents.FOCUS = "FOCUS";
webworks_core_AppEvents.FOCUS_LOST = "FOCUS_LOST";
webworks_core_GameEvents.UPDATE = "UPDATE";
webworks_core_GameEvents.PRE_UPDATE = "PRE_UPDATE";
webworks_core_GameEvents.POST_UPDATE = "POST_UPDATE";
webworks_math_Matrix.pool = [];
webworks_display_Sprite.pool = [];
webworks_display_Transform.pool = [];
webworks_input_Keys.keys = new haxe_ds_StringMap();
webworks_input_Keys.last = new haxe_ds_StringMap();
webworks_math_Vec2.pool = [];
webworks_input_Pointer.POINTER_EVENTS = new webworks_util_EventBus();
webworks_input_Pointer.touches = [];
webworks_input_Pointer.last_position = webworks_math_Vec2.get();
webworks_input_TouchPoint.pool = [];
webworks_input_PointerEvents.POINTER_DOWN = "POINTER_DOWN";
webworks_input_PointerEvents.POINTER_MOVE = "POINTER_MOVE";
webworks_input_PointerEvents.POINTER_UP = "POINTER_UP";
webworks_input_PointerEvents.POINTER_OUT = "POINTER_OUT";
webworks_math_Rect.pool = [];
webworks_util_ContextTools.last_alpha = 1;
webworks_util_Interactions.stack = [];
webworks_util_Interactions.events = [];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
